diff --git a/src/driver.c b/src/driver.c
index aec1cfa..8df3540 100644
--- a/src/driver.c
+++ b/src/driver.c
@@ -105,12 +105,14 @@ static SymTabRec Chipsets[] = {
 
 typedef enum {
     OPTION_ACCEL_METHOD,
-    OPTION_EGL_PLATFORM
+    OPTION_EGL_PLATFORM,
+    OPTION_ROTATE
 } Opts;
 
 static const OptionInfoRec Options[] = {
     { OPTION_ACCEL_METHOD, "AccelMethod", OPTV_STRING, {0}, FALSE},
     { OPTION_EGL_PLATFORM, "EGLPlatform", OPTV_STRING, {0}, FALSE},
+    { OPTION_ROTATE,       "Rotate",      OPTV_STRING, {0}, FALSE },
     { -1,               NULL,       OPTV_NONE,    {0}, FALSE }
 };
 
@@ -341,6 +343,7 @@ PreInit(ScrnInfoPtr pScrn, int flags)
     GDevPtr device = xf86GetEntityInfo(pScrn->entityList[0])->device;
     xf86CrtcPtr crtc;
     xf86OutputPtr output;
+    char *s;
 
     if (flags & PROBE_DETECT)
         return TRUE;
@@ -414,6 +417,26 @@ PreInit(ScrnInfoPtr pScrn, int flags)
 
     xf86ProcessOptions(pScrn->scrnIndex, pScrn->options, hwc->Options);
 
+    /* rotation */
+    hwc->rotation = HWC_ROTATE_CW;
+    if ((s = xf86GetOptValString(hwc->Options, OPTION_ROTATE)))
+    {
+        if(!xf86NameCmp(s, "CW")) {
+            hwc->rotation = HWC_ROTATE_CW;
+            xf86DrvMsg(pScrn->scrnIndex, X_CONFIG, "rotating screen clockwise\n");
+        }
+        else if(!xf86NameCmp(s, "CCW")) {
+            hwc->rotation = HWC_ROTATE_CCW;
+            xf86DrvMsg(pScrn->scrnIndex, X_CONFIG, "rotating screen counter-clockwise\n");
+        }
+        else {
+            xf86DrvMsg(pScrn->scrnIndex, X_CONFIG,
+                    "\"%s\" is not a valid value for Option \"Rotate\"\n", s);
+            xf86DrvMsg(pScrn->scrnIndex, X_INFO,
+                    "valid options are \"CW\", \"CCW\"\n");
+        }
+    }
+
     hwc_set_egl_platform(pScrn);
 
     if (!hwc_hwcomposer_init(pScrn)) {
diff --git a/src/driver.h b/src/driver.h
index 1de91fd..8f4bba8 100644
--- a/src/driver.h
+++ b/src/driver.h
@@ -50,6 +50,11 @@ Bool hwc_present_screen_init(ScreenPtr pScreen);
 void hwc_vblank_screen_init(ScreenPtr pScreen);
 int hwc_queue_vblank(ScreenPtr screen, uint64_t event_id, uint64_t hwcc);
 
+typedef enum {
+    HWC_ROTATE_CW,
+    HWC_ROTATE_CCW
+} hwc_rotation;
+
 typedef struct HWCRec
 {
     /* options */
@@ -69,6 +74,7 @@ typedef struct HWCRec
     Bool dirty;
     Bool glamor;
     Bool drihybris;
+    hwc_rotation rotation;
 
     gralloc_module_t *gralloc;
     alloc_device_t *alloc;
diff --git a/src/renderer.c b/src/renderer.c
index cd4b374..59725eb 100644
--- a/src/renderer.c
+++ b/src/renderer.c
@@ -71,11 +71,19 @@ static const GLfloat squareVertices[] = {
     1.0f,  1.0f,
 };
 
-static const GLfloat textureVertices[] = {
-    1.0f, 1.0f,
-    1.0f, 0.0f,
-    0.0f,  1.0f,
-    0.0f,  0.0f,
+static const GLfloat textureVertices[][8] = {
+    { // CW - 90 degrees
+        1.0f, 1.0f,
+        1.0f, 0.0f,
+        0.0f,  1.0f,
+        0.0f,  0.0f,
+    },
+    { // CCW - 270 degrees
+        0.0f,  0.0f,
+        0.0f,  1.0f,
+        1.0f, 0.0f,
+        1.0f, 1.0f
+    }
 };
 
 void present(void *user_data, struct ANativeWindow *window,
@@ -269,7 +277,7 @@ void hwc_egl_renderer_update(ScreenPtr pScreen)
     glVertexAttribPointer(position_loc, 2, GL_FLOAT, 0, 0, squareVertices);
     glEnableVertexAttribArray(position_loc);
 
-    glVertexAttribPointer(texcoords_loc, 2, GL_FLOAT, 0, 0, textureVertices);
+    glVertexAttribPointer(texcoords_loc, 2, GL_FLOAT, 0, 0, textureVertices[hwc->rotation]);
     glEnableVertexAttribArray(texcoords_loc);
 
     glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
